services:
  postgres:
    image: postgres:15
    container_name: postgres-staging
    environment:
      POSTGRES_USER: ${STAG_DB_USER}
      POSTGRES_PASSWORD: ${STAG_DB_PASSWORD}
      POSTGRES_DB: ${STAG_DB_NAME}
    volumes:
      - postgres_staging_data:/var/lib/postgresql/data
      - ./init-staging-dbs.sql:/docker-entrypoint-initdb.d/init-staging-dbs.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${STAG_DB_USER} -d ${STAG_DB_NAME}"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - staging-network

  app-staging-${STAGING_NUM}:
    build: .
    container_name: app-staging-${STAGING_NUM}
    ports:
      - "${STAGING_PORT}:3000"
    environment:
      - NODE_ENV=staging
      - POSTGRES_HOST=postgres-staging
      - POSTGRES_USER=${STAG_DB_USER}
      - POSTGRES_PASSWORD=${STAG_DB_PASSWORD}
      - POSTGRES_DB=staging_db_${STAGING_NUM}
      - POSTGRES_PORT=5432
      - STAGING_ENV=${STAGING_NUM}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - staging-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

volumes:
  postgres_staging_data:
    driver: local

networks:
  staging-network:
    driver: bridge