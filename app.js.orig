require('./scripts/instrument.js');

const Sentry = require('@sentry/node');
var createError = require('http-errors');
var express = require('express');
var path = require('path');
var cookieParser = require('cookie-parser');
var logger = require('morgan');

var indexRouter = require('./routes/index');

var app = express();

<<<<<<< HEAD
<<<<<<< HEAD
// Configure Express to trust proxy for X-Forwarded-For headers
app.set('trust proxy', true);

// Test database connection on startup
testConnection();

// Security middleware
app.use(helmetConfig);
// app.use(corsConfig); // Cors Config is iffy with the proxy setup, so it's disabled for now
app.use(limiter);

=======
>>>>>>> parent of 8b62037 (Added auth router and nessecary packages)
=======
>>>>>>> parent of 8b62037 (Added auth router and nessecary packages)
// view engine setup
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'ejs');

app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));

app.use('/', indexRouter);

// Initialize Sentry after the routes are set up
Sentry.setupExpressErrorHandler(app);

// catch 404 and forward to error handler
app.use(function(req, res, next) {
  next(createError(404));
});

// error handler
app.use(function(err, req, res, next) {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};

  // render the error page
  res.status(err.status || 500);
  res.render('error');
});

module.exports = app;
